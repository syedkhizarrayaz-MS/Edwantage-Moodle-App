/*! For license information please see 86647.ef243c60aa4f3017.js.LICENSE.txt */
"use strict";(self.webpackChunkapp=self.webpackChunkapp||[]).push([[86647],{12607:(e,t,r)=>{r.d(t,{A:()=>getNumDaysInMonth,B:()=>getCombinedDateColumnData,C:()=>getMonthColumnData,D:()=>getDayColumnData,E:()=>getYearColumnData,F:()=>isMonthFirstLocale,G:()=>getTimeColumnsData,H:()=>isLocaleDayPeriodRTL,I:()=>getDaysOfWeek,J:()=>getMonthAndYear,K:()=>getDaysOfMonth,L:()=>getHourCycle,M:()=>getLocalizedTime,N:()=>getLocalizedDateTime,O:()=>formatValue,P:()=>clampDate,Q:()=>parseAmPm,R:()=>calculateHourFromAMPM,a:()=>getDay,b:()=>isAfter,c:()=>isSameDay,d:()=>getPreviousMonth,e:()=>getNextMonth,f:()=>getPartsFromCalendarDay,g:()=>generateDayAriaLabel,h:()=>getNextYear,i:()=>isBefore,j:()=>getPreviousYear,k:()=>getEndOfWeek,l:()=>getStartOfWeek,m:()=>getPreviousDay,n:()=>getNextDay,o:()=>getPreviousWeek,p:()=>getNextWeek,q:()=>parseMinParts,r:()=>parseMaxParts,s:()=>parseDate,t:()=>convertToArrayOfNumbers,u:()=>convertDataToISO,v:()=>validateParts,w:()=>warnIfValueOutOfBounds,x:()=>getToday,y:()=>getClosestValidDate,z:()=>generateMonths});var n=r(99144);const isSameDay=(e,t)=>e.month===t.month&&e.day===t.day&&e.year===t.year,isBefore=(e,t)=>!!(e.year<t.year||e.year===t.year&&e.month<t.month||e.year===t.year&&e.month===t.month&&null!==e.day&&e.day<t.day),isAfter=(e,t)=>!!(e.year>t.year||e.year===t.year&&e.month>t.month||e.year===t.year&&e.month===t.month&&null!==e.day&&e.day>t.day),warnIfValueOutOfBounds=(e,t,r)=>{const o=Array.isArray(e)?e:[e];for(const a of o)if(void 0!==t&&isBefore(a,t)||void 0!==r&&isAfter(a,r)){(0,n.p)(`The value provided to ion-datetime is out of bounds.\n\nMin: ${JSON.stringify(t)}\nMax: ${JSON.stringify(r)}\nValue: ${JSON.stringify(e)}`);break}},getHourCycle=(e,t)=>{if(void 0!==t)return t;const r=new Intl.DateTimeFormat(e,{hour:"numeric"}),n=r.resolvedOptions();if(void 0!==n.hourCycle)return n.hourCycle;const o=new Date("5/18/2021 00:00"),a=r.formatToParts(o).find((e=>"hour"===e.type));if(!a)throw new Error("Hour value not found from DateTimeFormat");switch(a.value){case"0":return"h11";case"12":return"h12";case"00":return"h23";case"24":return"h24";default:throw new Error(`Invalid hour cycle "${t}"`)}},is24Hour=e=>"h23"===e||"h24"===e,getNumDaysInMonth=(e,t)=>4===e||6===e||9===e||11===e?30:2===e?(e=>e%4==0&&e%100!=0||e%400==0)(t)?29:28:31,isMonthFirstLocale=(e,t={month:"numeric",year:"numeric"})=>"month"===new Intl.DateTimeFormat(e,t).formatToParts(new Date)[0].type,isLocaleDayPeriodRTL=e=>"dayPeriod"===new Intl.DateTimeFormat(e,{hour:"numeric"}).formatToParts(new Date)[0].type,o=/^(\d{4}|[+\-]\d{6})(?:-(\d{2})(?:-(\d{2}))?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/,a=/^((\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/,convertToArrayOfNumbers=e=>{if(void 0===e)return;let t,r=e;return"string"==typeof e&&(r=e.replace(/\[|\]|\s/g,"").split(",")),t=Array.isArray(r)?r.map((e=>parseInt(e,10))).filter(isFinite):[r],t},getPartsFromCalendarDay=e=>({month:parseInt(e.getAttribute("data-month"),10),day:parseInt(e.getAttribute("data-day"),10),year:parseInt(e.getAttribute("data-year"),10),dayOfWeek:parseInt(e.getAttribute("data-day-of-week"),10)});function parseDate(e){if(Array.isArray(e)){const t=[];for(const r of e){const e=parseDate(r);if(!e)return;t.push(e)}return t}let t=null;if(null!=e&&""!==e&&(t=a.exec(e),t?(t.unshift(void 0,void 0),t[2]=t[3]=void 0):t=o.exec(e)),null===t)return(0,n.p)(`Unable to parse date string: ${e}. Please provide a valid ISO 8601 datetime string.`),void 0;for(let e=1;e<8;e++)t[e]=void 0!==t[e]?parseInt(t[e],10):void 0;return{year:t[1],month:t[2],day:t[3],hour:t[4],minute:t[5],ampm:t[4]<12?"am":"pm"}}const clampDate=(e,t,r)=>t&&isBefore(e,t)?t:r&&isAfter(e,r)?r:e,parseAmPm=e=>e>=12?"pm":"am",parseMaxParts=(e,t)=>{const r=parseDate(e);if(void 0===r)return;const{month:n,day:o,year:a,hour:i,minute:u}=r,m=null!=a?a:t.year,d=null!=n?n:12;return{month:d,day:null!=o?o:getNumDaysInMonth(d,m),year:m,hour:null!=i?i:23,minute:null!=u?u:59}},parseMinParts=(e,t)=>{const r=parseDate(e);if(void 0===r)return;const{month:n,day:o,year:a,hour:i,minute:u}=r;return{month:null!=n?n:1,day:null!=o?o:1,year:null!=a?a:t.year,hour:null!=i?i:0,minute:null!=u?u:0}},twoDigit=e=>("0"+(void 0!==e?Math.abs(e):"0")).slice(-2),fourDigit=e=>("000"+(void 0!==e?Math.abs(e):"0")).slice(-4);function convertDataToISO(e){if(Array.isArray(e))return e.map((e=>convertDataToISO(e)));let t="";return void 0!==e.year?(t=fourDigit(e.year),void 0!==e.month&&(t+="-"+twoDigit(e.month),void 0!==e.day&&(t+="-"+twoDigit(e.day),void 0!==e.hour&&(t+=`T${twoDigit(e.hour)}:${twoDigit(e.minute)}:00`)))):void 0!==e.hour&&(t=twoDigit(e.hour)+":"+twoDigit(e.minute)),t}const convert12HourTo24Hour=(e,t)=>void 0===t?e:"am"===t?12===e?0:e:12===e?12:e+12,getStartOfWeek=e=>{const{dayOfWeek:t}=e;if(null==t)throw new Error("No day of week provided");return subtractDays(e,t)},getEndOfWeek=e=>{const{dayOfWeek:t}=e;if(null==t)throw new Error("No day of week provided");return addDays(e,6-t)},getNextDay=e=>addDays(e,1),getPreviousDay=e=>subtractDays(e,1),getPreviousWeek=e=>subtractDays(e,7),getNextWeek=e=>addDays(e,7),subtractDays=(e,t)=>{const{month:r,day:n,year:o}=e;if(null===n)throw new Error("No day provided");const a={month:r,day:n,year:o};if(a.day=n-t,a.day<1&&(a.month-=1),a.month<1&&(a.month=12,a.year-=1),a.day<1){const e=getNumDaysInMonth(a.month,a.year);a.day=e+a.day}return a},addDays=(e,t)=>{const{month:r,day:n,year:o}=e;if(null===n)throw new Error("No day provided");const a={month:r,day:n,year:o},i=getNumDaysInMonth(r,o);return a.day=n+t,a.day>i&&(a.day-=i,a.month+=1),a.month>12&&(a.month=1,a.year+=1),a},getPreviousMonth=e=>{const t=1===e.month?12:e.month-1,r=1===e.month?e.year-1:e.year,n=getNumDaysInMonth(t,r);return{month:t,year:r,day:n<e.day?n:e.day}},getNextMonth=e=>{const t=12===e.month?1:e.month+1,r=12===e.month?e.year+1:e.year,n=getNumDaysInMonth(t,r);return{month:t,year:r,day:n<e.day?n:e.day}},changeYear=(e,t)=>{const r=e.month,n=e.year+t,o=getNumDaysInMonth(r,n);return{month:r,year:n,day:o<e.day?o:e.day}},getPreviousYear=e=>changeYear(e,-1),getNextYear=e=>changeYear(e,1),getInternalHourValue=(e,t,r)=>t?e:convert12HourTo24Hour(e,r),calculateHourFromAMPM=(e,t)=>{const{ampm:r,hour:n}=e;let o=n;return"am"===r&&"pm"===t?o=convert12HourTo24Hour(o,"pm"):"pm"===r&&"am"===t&&(o=Math.abs(o-12)),o},validateParts=(e,t,r)=>{const{month:n,day:o,year:a}=e,i=clampDate(Object.assign({},e),t,r),u=getNumDaysInMonth(n,a);return null!==o&&u<o&&(i.day=u),void 0!==t&&isSameDay(i,t)&&void 0!==i.hour&&void 0!==t.hour&&(i.hour<t.hour?(i.hour=t.hour,i.minute=t.minute):i.hour===t.hour&&void 0!==i.minute&&void 0!==t.minute&&i.minute<t.minute&&(i.minute=t.minute)),void 0!==r&&isSameDay(e,r)&&void 0!==i.hour&&void 0!==r.hour&&(i.hour>r.hour?(i.hour=r.hour,i.minute=r.minute):i.hour===r.hour&&void 0!==i.minute&&void 0!==r.minute&&i.minute>r.minute&&(i.minute=r.minute)),i},getClosestValidDate=({refParts:e,monthValues:t,dayValues:r,yearValues:n,hourValues:o,minuteValues:a,minParts:i,maxParts:u})=>{const{hour:m,minute:d,day:s,month:l,year:h}=e,y=Object.assign(Object.assign({},e),{dayOfWeek:void 0});if(void 0!==n){const e=n.filter((e=>!(void 0!==i&&e<i.year)&&!(void 0!==u&&e>u.year)));y.year=findClosestValue(h,e)}if(void 0!==t){const e=t.filter((e=>!(void 0!==i&&y.year===i.year&&e<i.month)&&!(void 0!==u&&y.year===u.year&&e>u.month)));y.month=findClosestValue(l,e)}if(null!==s&&void 0!==r){const e=r.filter((e=>(void 0===i||!isBefore(Object.assign(Object.assign({},y),{day:e}),i))&&(void 0===u||!isAfter(Object.assign(Object.assign({},y),{day:e}),u))));y.day=findClosestValue(s,e)}if(void 0!==m&&void 0!==o){const e=o.filter((e=>!(void 0!==(null==i?void 0:i.hour)&&isSameDay(y,i)&&e<i.hour)&&!(void 0!==(null==u?void 0:u.hour)&&isSameDay(y,u)&&e>u.hour)));y.hour=findClosestValue(m,e),y.ampm=parseAmPm(y.hour)}if(void 0!==d&&void 0!==a){const e=a.filter((e=>!(void 0!==(null==i?void 0:i.minute)&&isSameDay(y,i)&&y.hour===i.hour&&e<i.minute)&&!(void 0!==(null==u?void 0:u.minute)&&isSameDay(y,u)&&y.hour===u.hour&&e>u.minute)));y.minute=findClosestValue(d,e)}return y},findClosestValue=(e,t)=>{let r=t[0],n=Math.abs(r-e);for(let o=1;o<t.length;o++){const a=t[o],i=Math.abs(a-e);i<n&&(r=a,n=i)}return r},stripTimeZone=e=>Object.assign(Object.assign({},e),{timeZone:"UTC",timeZoneName:void 0}),getLocalizedTime=(e,t,r,n={hour:"numeric",minute:"numeric"})=>{const o={hour:t.hour,minute:t.minute};return void 0===o.hour||void 0===o.minute?"Invalid Time":new Intl.DateTimeFormat(e,Object.assign(Object.assign({},stripTimeZone(n)),{hourCycle:r})).format(new Date(convertDataToISO(Object.assign({year:2023,day:1,month:1},o))+"Z"))},addTimePadding=e=>{const t=e.toString();return t.length>1?t:`0${t}`},getFormattedHour=(e,t)=>{if(0===e)switch(t){case"h11":return"0";case"h12":return"12";case"h23":return"00";case"h24":return"24";default:throw new Error(`Invalid hour cycle "${t}"`)}return is24Hour(t)?addTimePadding(e):e.toString()},generateDayAriaLabel=(e,t,r)=>{if(null===r.day)return null;const n=getNormalizedDate(r),o=new Intl.DateTimeFormat(e,{weekday:"long",month:"long",day:"numeric",timeZone:"UTC"}).format(n);return t?`Today, ${o}`:o},getMonthAndYear=(e,t)=>{const r=getNormalizedDate(t);return new Intl.DateTimeFormat(e,{month:"long",year:"numeric",timeZone:"UTC"}).format(r)},getDay=(e,t)=>getLocalizedDateTimeParts(e,t,{day:"numeric"}).find((e=>"day"===e.type)).value,getYear=(e,t)=>getLocalizedDateTime(e,t,{year:"numeric"}),getNormalizedDate=e=>{var t,r,n;return new Date(`${null!==(t=e.month)&&void 0!==t?t:1}/${null!==(r=e.day)&&void 0!==r?r:1}/${null!==(n=e.year)&&void 0!==n?n:2023}${void 0!==e.hour&&void 0!==e.minute?` ${e.hour}:${e.minute}`:""} GMT+0000`)},getLocalizedDateTime=(e,t,r)=>{const n=getNormalizedDate(t);return getDateTimeFormat(e,stripTimeZone(r)).format(n)},getLocalizedDateTimeParts=(e,t,r)=>{const n=getNormalizedDate(t);return getDateTimeFormat(e,r).formatToParts(n)},getDateTimeFormat=(e,t)=>new Intl.DateTimeFormat(e,Object.assign(Object.assign({},t),{timeZone:"UTC"})),getTodayLabel=e=>{if("RelativeTimeFormat"in Intl){const t=new Intl.RelativeTimeFormat(e,{numeric:"auto"}).format(0,"day");return t.charAt(0).toUpperCase()+t.slice(1)}return"Today"},removeDateTzOffset=e=>{const t=e.getTimezoneOffset();return e.setMinutes(e.getMinutes()-t),e},i=removeDateTzOffset(new Date("2022T01:00")),u=removeDateTzOffset(new Date("2022T13:00")),getLocalizedDayPeriod=(e,t)=>{const r="am"===t?i:u,n=new Intl.DateTimeFormat(e,{hour:"numeric",timeZone:"UTC"}).formatToParts(r).find((e=>"dayPeriod"===e.type));return n?n.value:(e=>void 0===e?"":e.toUpperCase())(t)},formatValue=e=>Array.isArray(e)?e.join(","):e,getToday=()=>removeDateTzOffset(new Date).toISOString(),m=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],d=[0,1,2,3,4,5,6,7,8,9,10,11],s=[0,1,2,3,4,5,6,7,8,9,10,11],l=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],h=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,0],getDaysOfWeek=(e,t,r=0)=>{const n=new Intl.DateTimeFormat(e,{weekday:"ios"===t?"short":"narrow"}),o=new Date("11/01/2020"),a=[];for(let e=r;e<r+7;e++){const t=new Date(o);t.setDate(t.getDate()+e),a.push(n.format(t))}return a},getDaysOfMonth=(e,t,r)=>{const n=getNumDaysInMonth(e,t),o=new Date(`${e}/1/${t}`).getDay(),a=o>=r?o-(r+1):6-(r-o);let i=[];for(let e=1;e<=n;e++)i.push({day:e,dayOfWeek:(a+e)%7});for(let e=0;e<=a;e++)i=[{day:null,dayOfWeek:null},...i];return i},generateTime=(e,t,r="h12",n,o,a,i)=>{const u=getHourCycle(e,r),y=is24Hour(u);let c=(e=>{switch(e){case"h11":return d;case"h12":return s;case"h23":return l;case"h24":return h;default:throw new Error(`Invalid hour cycle "${e}"`)}})(u),v=m,f=!0,p=!0;if(a&&(c=c.filter((e=>a.includes(e)))),i&&(v=v.filter((e=>i.includes(e)))),n)if(isSameDay(t,n)){if(void 0!==n.hour&&(c=c.filter((e=>(y?e:"pm"===t.ampm?(e+12)%24:e)>=n.hour)),f=n.hour<13),void 0!==n.minute){let e=!1;void 0!==n.hour&&void 0!==t.hour&&t.hour>n.hour&&(e=!0),v=v.filter((t=>!!e||t>=n.minute))}}else isBefore(t,n)&&(c=[],v=[],f=p=!1);return o&&(isSameDay(t,o)?(void 0!==o.hour&&(c=c.filter((e=>(y?e:"pm"===t.ampm?(e+12)%24:e)<=o.hour)),p=o.hour>=12),void 0!==o.minute&&t.hour===o.hour&&(v=v.filter((e=>e<=o.minute)))):isAfter(t,o)&&(c=[],v=[],f=p=!1)),{hours:c,minutes:v,am:f,pm:p}},generateMonths=(e,t)=>{const r={month:e.month,year:e.year,day:e.day};if(void 0!==t&&(e.month!==t.month||e.year!==t.year)){const n={month:t.month,year:t.year,day:t.day};return isBefore(n,r)?[n,r,getNextMonth(e)]:[getPreviousMonth(e),r,n]}return[getPreviousMonth(e),r,getNextMonth(e)]},getMonthColumnData=(e,t,r,n,o,a={month:"long"})=>{const{year:i}=t,u=[];if(void 0!==o){let t=o;void 0!==(null==n?void 0:n.month)&&(t=t.filter((e=>e<=n.month))),void 0!==(null==r?void 0:r.month)&&(t=t.filter((e=>e>=r.month))),t.forEach((t=>{const r=new Date(`${t}/1/${i} GMT+0000`),n=new Intl.DateTimeFormat(e,Object.assign(Object.assign({},a),{timeZone:"UTC"})).format(r);u.push({text:n,value:t})}))}else{const t=n&&n.year===i?n.month:12;for(let n=r&&r.year===i?r.month:1;n<=t;n++){const t=new Date(`${n}/1/${i} GMT+0000`),r=new Intl.DateTimeFormat(e,Object.assign(Object.assign({},a),{timeZone:"UTC"})).format(t);u.push({text:r,value:n})}}return u},getDayColumnData=(e,t,r,n,o,a={day:"numeric"})=>{const{month:i,year:u}=t,m=[],d=getNumDaysInMonth(i,u),s=null!=(null==n?void 0:n.day)&&n.year===u&&n.month===i?n.day:d,l=null!=(null==r?void 0:r.day)&&r.year===u&&r.month===i?r.day:1;if(void 0!==o){let t=o;t=t.filter((e=>e>=l&&e<=s)),t.forEach((t=>{const r=new Date(`${i}/${t}/${u} GMT+0000`),n=new Intl.DateTimeFormat(e,Object.assign(Object.assign({},a),{timeZone:"UTC"})).format(r);m.push({text:n,value:t})}))}else for(let t=l;t<=s;t++){const r=new Date(`${i}/${t}/${u} GMT+0000`),n=new Intl.DateTimeFormat(e,Object.assign(Object.assign({},a),{timeZone:"UTC"})).format(r);m.push({text:n,value:t})}return m},getYearColumnData=(e,t,r,n,o)=>{var a,i;let u=[];if(void 0!==o)u=o,void 0!==(null==n?void 0:n.year)&&(u=u.filter((e=>e<=n.year))),void 0!==(null==r?void 0:r.year)&&(u=u.filter((e=>e>=r.year)));else{const{year:e}=t,o=null!==(a=null==n?void 0:n.year)&&void 0!==a?a:e;for(let t=null!==(i=null==r?void 0:r.year)&&void 0!==i?i:e-100;t<=o;t++)u.push(t)}return u.map((r=>({text:getYear(e,{year:r,month:t.month,day:t.day}),value:r})))},getAllMonthsInRange=(e,t)=>e.month===t.month&&e.year===t.year?[e]:[e,...getAllMonthsInRange(getNextMonth(e),t)],getCombinedDateColumnData=(e,t,r,n,o,a)=>{let i=[],u=[],m=getAllMonthsInRange(r,n);return a&&(m=m.filter((({month:e})=>a.includes(e)))),m.forEach((a=>{const m={month:a.month,day:null,year:a.year},d=getDayColumnData(e,m,r,n,o,{month:"short",day:"numeric",weekday:"short"}),s=[],l=[];d.forEach((r=>{const n=isSameDay(Object.assign(Object.assign({},m),{day:r.value}),t);l.push({text:n?getTodayLabel(e):r.text,value:`${m.year}-${m.month}-${r.value}`}),s.push({month:m.month,year:m.year,day:r.value})})),u=[...u,...s],i=[...i,...l]})),{parts:u,items:i}},getTimeColumnsData=(e,t,r,n,o,a,i)=>{const u=getHourCycle(e,r),m=is24Hour(u),{hours:d,minutes:s,am:l,pm:h}=generateTime(e,t,u,n,o,a,i),y=d.map((e=>({text:getFormattedHour(e,u),value:getInternalHourValue(e,m,t.ampm)}))),c=s.map((e=>({text:addTimePadding(e),value:e}))),v=[];return l&&!m&&v.push({text:getLocalizedDayPeriod(e,"am"),value:"am"}),h&&!m&&v.push({text:getLocalizedDayPeriod(e,"pm"),value:"pm"}),{minutesData:c,hoursData:y,dayPeriodData:v}}},80333:(e,t,r)=>{r.d(t,{c:()=>createColorClasses,g:()=>getClassMap,h:()=>hostContext,o:()=>a});var n=r(10467);const hostContext=(e,t)=>null!==t.closest(e),createColorClasses=(e,t)=>"string"==typeof e&&e.length>0?Object.assign({"ion-color":!0,[`ion-color-${e}`]:!0},t):t,getClassMap=e=>{const t={};return(e=>{if(void 0!==e)return(Array.isArray(e)?e:e.split(" ")).filter((e=>null!=e)).map((e=>e.trim())).filter((e=>""!==e));return[]})(e).forEach((e=>t[e]=!0)),t},o=/^[a-z][a-z0-9+\-.]*:/,a=function(){var e=(0,n.A)((function*(e,t,r,n){if(null!=e&&"#"!==e[0]&&!o.test(e)){const o=document.querySelector("ion-router");if(o)return null!=t&&t.preventDefault(),o.push(e,r,n)}return!1}));return function openURL(t,r,n,o){return e.apply(this,arguments)}}()}}]);